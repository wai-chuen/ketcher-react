{"code":"import { Action, Atom, fromAtomsAttrs } from 'ketcher-core';\r\nimport { fromElement } from '../../data/convert/structconv';\r\nexport function isAtomsArray(selectedElements) {\r\n    return (Array.isArray(selectedElements) &&\r\n        selectedElements?.every((element) => element instanceof Atom));\r\n}\r\n// If all atoms have the same value, then this value is used as a baseline\r\n// otherwise it is set to an empty string. Afterwards, empty string denotes that the value is not changed\r\nexport function generateCommonProperties(selectedElements) {\r\n    const normalizedAtom = fromElement(selectedElements[0]);\r\n    const properties = Object.getOwnPropertyNames(normalizedAtom);\r\n    const resultAtomAttributes = {};\r\n    properties.forEach((property) => {\r\n        const uniqueValues = new Set();\r\n        selectedElements.forEach((element) => {\r\n            uniqueValues.add(element[property]);\r\n        });\r\n        const allAtomsHaveTheSameValue = uniqueValues.size === 1;\r\n        if (allAtomsHaveTheSameValue) {\r\n            resultAtomAttributes[property] = normalizedAtom[property];\r\n        }\r\n        else {\r\n            resultAtomAttributes[property] = '';\r\n        }\r\n    });\r\n    return resultAtomAttributes;\r\n}\r\nfunction castAtomPropToType(property, value) {\r\n    const typesMapping = {\r\n        charge: Number,\r\n        exactChangeFlag: Number,\r\n        unsaturatedAtom: Number\r\n    };\r\n    if (typesMapping[property]) {\r\n        return typesMapping[property](value);\r\n    }\r\n    return value;\r\n}\r\nexport function updateOnlyChangedProperties(atomId, userChangedAtom, molecule) {\r\n    const unchangedAtom = molecule.atoms.get(atomId);\r\n    const updatedKeys = Object.getOwnPropertyNames(userChangedAtom).filter((key) => userChangedAtom[key] !== '');\r\n    return Object.getOwnPropertyNames(unchangedAtom).reduce((updatedAtom, key) => {\r\n        const isPropertyChanged = updatedKeys.includes(key);\r\n        if (isPropertyChanged) {\r\n            updatedAtom[key] = castAtomPropToType(key, userChangedAtom[key]);\r\n        }\r\n        else {\r\n            updatedAtom[key] = unchangedAtom[key];\r\n        }\r\n        return updatedAtom;\r\n    }, {});\r\n}\r\nexport function updateSelectedAtoms({ atoms, changeAtomPromise, editor }) {\r\n    const action = new Action();\r\n    const struct = editor.render.ctab;\r\n    const { molecule } = struct;\r\n    if (atoms) {\r\n        Promise.resolve(changeAtomPromise)\r\n            .then((userChangedAtom) => {\r\n            // TODO: deep compare to not produce dummy, e.g.\r\n            // atom.label != attrs.label || !atom.atomList.equals(attrs.atomList)\r\n            atoms.forEach((atomId) => {\r\n                const atomWithChangedProperties = updateOnlyChangedProperties(atomId, userChangedAtom, molecule);\r\n                action.mergeWith(fromAtomsAttrs(struct, atomId, atomWithChangedProperties, false));\r\n            });\r\n            editor.update(action);\r\n        })\r\n            .catch(() => null);\r\n    }\r\n}\r\n//# sourceMappingURL=atoms.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/dist/index.d.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/ui/data/convert/structconv.js"],"map":"{\"version\":3,\"file\":\"atoms.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/script/ui/state/modal/atoms.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,MAAM,cAAc,CAAA;AAC3D,OAAO,EAAE,WAAW,EAAE,MAAM,+BAA+B,CAAA;AAE3D,MAAM,UAAU,YAAY,CAAC,gBAA+B;IAC1D,OAAO,CACL,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC;QAC/B,gBAAgB,EAAE,KAAK,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,YAAY,IAAI,CAAC,CAC9D,CAAA;AACH,CAAC;AAMD,0EAA0E;AAC1E,yGAAyG;AACzG,MAAM,UAAU,wBAAwB,CACtC,gBAAwB;IAExB,MAAM,cAAc,GAAG,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAA;IACvD,MAAM,UAAU,GAAG,MAAM,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAA;IAC7D,MAAM,oBAAoB,GAAyB,EAAE,CAAA;IACrD,UAAU,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;QAC9B,MAAM,YAAY,GAAG,IAAI,GAAG,EAAE,CAAA;QAC9B,gBAAgB,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACnC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAA;QACrC,CAAC,CAAC,CAAA;QACF,MAAM,wBAAwB,GAAG,YAAY,CAAC,IAAI,KAAK,CAAC,CAAA;QACxD,IAAI,wBAAwB,EAAE;YAC5B,oBAAoB,CAAC,QAAQ,CAAC,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAA;SAC1D;aAAM;YACL,oBAAoB,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAA;SACpC;IACH,CAAC,CAAC,CAAA;IACF,OAAO,oBAAoB,CAAA;AAC7B,CAAC;AAED,SAAS,kBAAkB,CAAC,QAAQ,EAAE,KAAK;IACzC,MAAM,YAAY,GAAG;QACnB,MAAM,EAAE,MAAM;QACd,eAAe,EAAE,MAAM;QACvB,eAAe,EAAE,MAAM;KACxB,CAAA;IACD,IAAI,YAAY,CAAC,QAAQ,CAAC,EAAE;QAC1B,OAAO,YAAY,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAA;KACrC;IACD,OAAO,KAAK,CAAA;AACd,CAAC;AAED,MAAM,UAAU,2BAA2B,CAAC,MAAM,EAAE,eAAe,EAAE,QAAQ;IAC3E,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IAChD,MAAM,WAAW,GAAG,MAAM,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC,MAAM,CACpE,CAAC,GAAG,EAAE,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,EAAE,CACrC,CAAA;IACD,OAAO,MAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC,MAAM,CACrD,CAAC,WAAW,EAAE,GAAG,EAAE,EAAE;QACnB,MAAM,iBAAiB,GAAG,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;QACnD,IAAI,iBAAiB,EAAE;YACrB,WAAW,CAAC,GAAG,CAAC,GAAG,kBAAkB,CAAC,GAAG,EAAE,eAAe,CAAC,GAAG,CAAC,CAAC,CAAA;SACjE;aAAM;YACL,WAAW,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,CAAA;SACtC;QACD,OAAO,WAAW,CAAA;IACpB,CAAC,EACD,EAAE,CACH,CAAA;AACH,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,EAClC,KAAK,EACL,iBAAiB,EACjB,MAAM,EAKP;IACC,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAA;IAC3B,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAA;IACjC,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAA;IAC3B,IAAI,KAAK,EAAE;QACT,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC;aAC/B,IAAI,CAAC,CAAC,eAAe,EAAE,EAAE;YACxB,gDAAgD;YAChD,qEAAqE;YACrE,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBACvB,MAAM,yBAAyB,GAAG,2BAA2B,CAC3D,MAAM,EACN,eAAe,EACf,QAAQ,CACT,CAAA;gBACD,MAAM,CAAC,SAAS,CACd,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,yBAAyB,EAAE,KAAK,CAAC,CACjE,CAAA;YACH,CAAC,CAAC,CAAA;YACF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;QACvB,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAA;KACrB;AACH,CAAC\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/node_modules/.cache/rollup-plugin-typescript2/placeholder/script/ui/state/modal/atoms.d.ts","writeByteOrderMark":false,"text":"import { Atom } from 'ketcher-core';\r\nexport declare function isAtomsArray(selectedElements: Atom | Atom[]): boolean;\r\ndeclare type somePropertiesOfAtom = Partial<{\r\n    [attribute in keyof Atom]: string | number | boolean;\r\n}>;\r\nexport declare function generateCommonProperties(selectedElements: Atom[]): somePropertiesOfAtom;\r\nexport declare function updateOnlyChangedProperties(atomId: any, userChangedAtom: any, molecule: any): {};\r\nexport declare function updateSelectedAtoms({ atoms, changeAtomPromise, editor }: {\r\n    atoms: number[];\r\n    editor: any;\r\n    changeAtomPromise: Promise<Atom>;\r\n}): void;\r\nexport {};\r\n"}}
