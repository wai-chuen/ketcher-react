{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { GenSet } from './GenSet';\r\nimport { isGenericGroup } from '../../helpers';\r\nimport styles from './GenGroup.module.less';\r\nconst getLegendClassname = (title) => {\r\n    const mainTitles = [\r\n        'Atom Generics',\r\n        'Special Nodes',\r\n        'Group Generics',\r\n        'Acyclic',\r\n        'Cyclic'\r\n    ];\r\n    if (mainTitles.includes(title))\r\n        return 'legendMain';\r\n    return 'legend';\r\n};\r\nconst GenGroup = ({ group, onAtomSelect, selected }) => {\r\n    return (_jsx(\"div\", { className: styles.fieldFlexWrapper, children: _jsxs(\"fieldset\", { className: styles.fieldset, children: [_jsx(\"legend\", { className: styles[getLegendClassname(group.title)], children: group.title }), _jsx(\"div\", { className: isGenericGroup(group.title)\r\n                        ? styles.genButtonContainer\r\n                        : styles.buttonContainer, children: group.itemSets && (_jsx(GenSet, { labels: group.itemSets, selected: selected, onAtomSelect: onAtomSelect, className: styles.subGroup, group: group.title })) })] }) }));\r\n};\r\nexport { GenGroup };\r\n//# sourceMappingURL=GenGroup.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/dist/index.d.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/ui/views/modal/components/ExtendedTable/components/GenericGroups/GenSet.tsx","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/ui/views/modal/components/ExtendedTable/helpers.js"],"map":"{\"version\":3,\"file\":\"GenGroup.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../../../../../src/script/ui/views/modal/components/ExtendedTable/components/GenericGroups/GenGroup.tsx\"],\"names\":[],\"mappings\":\";AAiBA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAA;AACjC,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAA;AAC9C,OAAO,MAAM,MAAM,wBAAwB,CAAA;AAQ3C,MAAM,kBAAkB,GAAG,CAAC,KAAa,EAAE,EAAE;IAC3C,MAAM,UAAU,GAAG;QACjB,eAAe;QACf,eAAe;QACf,gBAAgB;QAChB,SAAS;QACT,QAAQ;KACT,CAAA;IACD,IAAI,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC;QAAE,OAAO,YAAY,CAAA;IACnD,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA;AAED,MAAM,QAAQ,GAAG,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,QAAQ,EAAY,EAAE,EAAE;IAC/D,OAAO,CACL,cAAK,SAAS,EAAE,MAAM,CAAC,gBAAgB,YACrC,oBAAU,SAAS,EAAE,MAAM,CAAC,QAAQ,aAClC,iBAAQ,SAAS,EAAE,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,YACvD,KAAK,CAAC,KAAK,GACL,EACT,cACE,SAAS,EACP,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC;wBACzB,CAAC,CAAC,MAAM,CAAC,kBAAkB;wBAC3B,CAAC,CAAC,MAAM,CAAC,eAAe,YAG3B,KAAK,CAAC,QAAQ,IAAI,CACjB,KAAC,MAAM,IACL,MAAM,EAAE,KAAK,CAAC,QAAQ,EACtB,QAAQ,EAAE,QAAQ,EAClB,YAAY,EAAE,YAAY,EAC1B,SAAS,EAAE,MAAM,CAAC,QAAQ,EAC1B,KAAK,EAAE,KAAK,CAAC,KAAK,GAClB,CACH,GACG,IACG,GACP,CACP,CAAA;AACH,CAAC,CAAA;AAED,OAAO,EAAE,QAAQ,EAAE,CAAA\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/node_modules/.cache/rollup-plugin-typescript2/placeholder/script/ui/views/modal/components/ExtendedTable/components/GenericGroups/GenGroup.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2022 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\n/// <reference types=\"react\" />\r\nimport type { GenGroup as GenGroupType } from 'ketcher-core';\r\ndeclare type GenProps = {\r\n    selected: (label: string) => boolean;\r\n    onAtomSelect: (label: string, activateImmediately: boolean) => void;\r\n    group: GenGroupType;\r\n};\r\ndeclare const GenGroup: ({ group, onAtomSelect, selected }: GenProps) => JSX.Element;\r\nexport { GenGroup };\r\n"}}
