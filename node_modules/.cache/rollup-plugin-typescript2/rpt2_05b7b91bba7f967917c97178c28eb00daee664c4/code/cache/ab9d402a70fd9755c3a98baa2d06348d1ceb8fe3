{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { DefaultStructServiceOptions, FormatterFactory, Ketcher } from 'ketcher-core';\r\nimport createApi from '../../api';\r\nimport { initApp } from '../../ui';\r\nclass KetcherBuilder {\r\n    structService;\r\n    editor;\r\n    serviceMode;\r\n    formatterFactory;\r\n    constructor() {\r\n        this.structService = null;\r\n        this.editor = null;\r\n        this.serviceMode = null;\r\n        this.formatterFactory = null;\r\n    }\r\n    async appendApiAsync(structServiceProvider) {\r\n        this.structService = createApi(structServiceProvider, DefaultStructServiceOptions);\r\n    }\r\n    appendServiceMode(mode) {\r\n        this.serviceMode = mode;\r\n    }\r\n    async appendUiAsync(element, staticResourcesUrl, errorHandler, buttons) {\r\n        const { structService } = this;\r\n        const editor = await new Promise((resolve) => {\r\n            initApp(element, staticResourcesUrl, {\r\n                buttons: buttons || {},\r\n                errorHandler: errorHandler || null,\r\n                version: \"2.9.0-rc.1\" || '',\r\n                buildDate: \"2023-03-15T16:28:02\" || '',\r\n                buildNumber: undefined || ''\r\n            }, structService, resolve);\r\n        });\r\n        this.editor = editor;\r\n        this.editor.errorHandler =\r\n            errorHandler && typeof errorHandler === 'function'\r\n                ? errorHandler\r\n                : // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                    () => { };\r\n        this.formatterFactory = new FormatterFactory(structService);\r\n    }\r\n    build() {\r\n        if (!this.serviceMode) {\r\n            throw new Error('You should append ServiceMode before building');\r\n        }\r\n        if (!this.structService) {\r\n            throw new Error('You should append Api before building');\r\n        }\r\n        if (!this.formatterFactory) {\r\n            throw new Error('You should append StructureServiceFactory before building');\r\n        }\r\n        const ketcher = new Ketcher(this.editor, this.structService, this.formatterFactory);\r\n        ketcher[this.serviceMode] = true;\r\n        const params = new URLSearchParams(document.location.search);\r\n        const initialMol = params.get('moll');\r\n        if (initialMol) {\r\n            ketcher.setMolecule(initialMol);\r\n        }\r\n        return ketcher;\r\n    }\r\n}\r\nexport { KetcherBuilder };\r\n//# sourceMappingURL=KetcherBuilder.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/node_modules/ketcher-core/dist/index.d.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/builders/ketcher/ButtonsConfig.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/editor/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/api.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/ui/index.ts"],"map":"{\"version\":3,\"file\":\"KetcherBuilder.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/script/builders/ketcher/KetcherBuilder.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;6EAc6E;AAE7E,OAAO,EACL,2BAA2B,EAC3B,gBAAgB,EAChB,OAAO,EAIR,MAAM,cAAc,CAAA;AAIrB,OAAO,SAAS,MAAM,WAAW,CAAA;AACjC,OAAO,EAAE,OAAO,EAAE,MAAM,UAAU,CAAA;AAElC,MAAM,cAAc;IACV,aAAa,CAAsB;IACnC,MAAM,CAAe;IACrB,WAAW,CAAoB;IAC/B,gBAAgB,CAAyB;IAEjD;QACE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA;QACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAA;QAClB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAA;QACvB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAA;IAC9B,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,qBAA4C;QAC/D,IAAI,CAAC,aAAa,GAAG,SAAS,CAC5B,qBAAqB,EACrB,2BAA2B,CAC5B,CAAA;IACH,CAAC;IAED,iBAAiB,CAAC,IAAiB;QACjC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAA;IACzB,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,OAA8B,EAC9B,kBAA0B,EAC1B,YAAuC,EACvC,OAAuB;QAEvB,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,CAAA;QAE9B,MAAM,MAAM,GAAG,MAAM,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,EAAE;YACnD,OAAO,CACL,OAAO,EACP,kBAAkB,EAClB;gBACE,OAAO,EAAE,OAAO,IAAI,EAAE;gBACtB,YAAY,EAAE,YAAY,IAAI,IAAI;gBAClC,OAAO,EAAE,YAAY,IAAI,EAAE;gBAC3B,SAAS,EAAE,qBAAqB,IAAI,EAAE;gBACtC,WAAW,EAAE,SAAS,IAAI,EAAE;aAC7B,EACD,aAAc,EACd,OAAO,CACR,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,MAAM,CAAC,YAAY;YACtB,YAAY,IAAI,OAAO,YAAY,KAAK,UAAU;gBAChD,CAAC,CAAC,YAAY;gBACd,CAAC,CAAC,gEAAgE;oBAChE,GAAG,EAAE,GAAE,CAAC,CAAA;QACd,IAAI,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,aAAc,CAAC,CAAA;IAC9D,CAAC;IAED,KAAK;QACH,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAA;SACjE;QAED,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAA;SACzD;QAED,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,MAAM,IAAI,KAAK,CACb,2DAA2D,CAC5D,CAAA;SACF;QAED,MAAM,OAAO,GAAG,IAAI,OAAO,CACzB,IAAI,CAAC,MAAO,EACZ,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,gBAAgB,CACtB,CAAA;QACD,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAA;QAEhC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;QAC5D,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;QACrC,IAAI,UAAU,EAAE;YACd,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,CAAA;SAChC;QAED,OAAO,OAAO,CAAA;IAChB,CAAC;CACF;AAED,OAAO,EAAE,cAAc,EAAE,CAAA\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/node_modules/.cache/rollup-plugin-typescript2/placeholder/script/builders/ketcher/KetcherBuilder.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Ketcher, ServiceMode, StructServiceProvider } from 'ketcher-core';\r\nimport { ButtonsConfig } from './ButtonsConfig';\r\ndeclare class KetcherBuilder {\r\n    private structService;\r\n    private editor;\r\n    private serviceMode;\r\n    private formatterFactory;\r\n    constructor();\r\n    appendApiAsync(structServiceProvider: StructServiceProvider): Promise<void>;\r\n    appendServiceMode(mode: ServiceMode): void;\r\n    appendUiAsync(element: HTMLDivElement | null, staticResourcesUrl: string, errorHandler: (message: string) => void, buttons?: ButtonsConfig): Promise<void>;\r\n    build(): Ketcher;\r\n}\r\nexport { KetcherBuilder };\r\n"}}
