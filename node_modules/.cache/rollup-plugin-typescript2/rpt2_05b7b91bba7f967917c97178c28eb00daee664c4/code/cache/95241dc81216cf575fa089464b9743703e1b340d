{"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\r\n/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Component, createRef } from 'react';\r\nimport { MolSerializer, Struct } from 'ketcher-core';\r\nimport { RenderStruct } from '../utils';\r\nclass StructRender extends Component {\r\n    tagRef;\r\n    constructor(props) {\r\n        super(props);\r\n        this.tagRef = createRef();\r\n    }\r\n    shouldComponentUpdate(previousProps) {\r\n        return Boolean(this.props.id && this.props.id !== previousProps.id);\r\n    }\r\n    update() {\r\n        const el = this.tagRef.current;\r\n        const { struct, options } = this.props;\r\n        let parsedStruct;\r\n        if (!(struct instanceof Struct)) {\r\n            try {\r\n                const molSerialzer = new MolSerializer();\r\n                parsedStruct = molSerialzer.deserialize(struct);\r\n            }\r\n            catch (e) {\r\n                // TODO: add error handler call\r\n                // legacy message: Could not parse structure\r\n                parsedStruct = null;\r\n            }\r\n        }\r\n        else {\r\n            parsedStruct = struct;\r\n        }\r\n        el?.childNodes.forEach((node) => {\r\n            node.remove();\r\n        });\r\n        RenderStruct.render(el, parsedStruct, options);\r\n    }\r\n    componentDidMount() {\r\n        this.update();\r\n    }\r\n    componentDidUpdate() {\r\n        this.update();\r\n    }\r\n    render() {\r\n        const { struct, Tag = 'div', ...props } = this.props;\r\n        return (_jsx(Tag, { ref: this.tagRef, ...props, children: struct ? null : 'No molecule' }));\r\n    }\r\n}\r\nexport default StructRender;\r\n//# sourceMappingURL=structrender.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/node_modules/@types/react/index.d.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/dist/index.d.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/ui/utils/index.ts"],"map":"{\"version\":3,\"file\":\"structrender.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/script/ui/component/structrender.tsx\"],\"names\":[],\"mappings\":\";AAAA;;;;;;;;;;;;;;6EAc6E;AAE7E,OAAO,EAAE,SAAS,EAAiB,SAAS,EAAE,MAAM,OAAO,CAAA;AAC3D,OAAO,EAAE,aAAa,EAAE,MAAM,EAAE,MAAM,cAAc,CAAA;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAA;AAQvC,MAAM,YAAa,SAAQ,SAA4B;IACrD,MAAM,CAA8B;IACpC,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAA;QACZ,IAAI,CAAC,MAAM,GAAG,SAAS,EAAE,CAAA;IAC3B,CAAC;IAED,qBAAqB,CAAC,aAAa;QACjC,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,aAAa,CAAC,EAAE,CAAC,CAAA;IACrE,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAA;QAC9B,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,CAAA;QACtC,IAAI,YAA2B,CAAA;QAC/B,IAAI,CAAC,CAAC,MAAM,YAAY,MAAM,CAAC,EAAE;YAC/B,IAAI;gBACF,MAAM,YAAY,GAAG,IAAI,aAAa,EAAE,CAAA;gBACxC,YAAY,GAAG,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;aAChD;YAAC,OAAO,CAAC,EAAE;gBACV,+BAA+B;gBAC/B,4CAA4C;gBAC5C,YAAY,GAAG,IAAI,CAAA;aACpB;SACF;aAAM;YACL,YAAY,GAAG,MAAM,CAAA;SACtB;QACD,EAAE,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC9B,IAAI,CAAC,MAAM,EAAE,CAAA;QACf,CAAC,CAAC,CAAA;QACF,YAAY,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,EAAE,OAAO,CAAC,CAAA;IAChD,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,MAAM,EAAE,CAAA;IACf,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,MAAM,EAAE,CAAA;IACf,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAA;QACpD,OAAO,CACL,KAAC,GAAG,IAAC,GAAG,EAAE,IAAI,CAAC,MAAM,KAAqB,KAAK,YAC5C,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,GAC1B,CACP,CAAA;IACH,CAAC;CACF;AAED,eAAe,YAAY,CAAA\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/node_modules/.cache/rollup-plugin-typescript2/placeholder/script/ui/component/structrender.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Component, ComponentType } from 'react';\r\nimport { Struct } from 'ketcher-core';\r\ninterface StructRenderProps {\r\n    struct: Struct;\r\n    options: any;\r\n    id?: any;\r\n    Tag?: string | ComponentType<any>;\r\n}\r\ndeclare class StructRender extends Component<StructRenderProps> {\r\n    tagRef: React.RefObject<HTMLElement>;\r\n    constructor(props: any);\r\n    shouldComponentUpdate(previousProps: any): boolean;\r\n    update(): void;\r\n    componentDidMount(): void;\r\n    componentDidUpdate(): void;\r\n    render(): JSX.Element;\r\n}\r\nexport default StructRender;\r\n"}}
