{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { FormatterFactory, Pile, SGroup, getStereoAtomsMap, identifyStructFormat, SupportedFormat } from 'ketcher-core';\r\nimport { supportedSGroupTypes } from './constants';\r\nimport { setAnalyzingFile } from './request';\r\nimport tools from '../action/tools';\r\nimport { SettingsManager } from '../utils/settingsManager';\r\nexport function onAction(action) {\r\n    if (action && action.dialog) {\r\n        return {\r\n            type: 'MODAL_OPEN',\r\n            data: { name: action.dialog, prop: action.prop }\r\n        };\r\n    }\r\n    if (action && action.thunk) {\r\n        return action.thunk;\r\n    }\r\n    return {\r\n        type: 'ACTION',\r\n        action\r\n    };\r\n}\r\nexport function loadStruct(struct) {\r\n    return (_dispatch, getState) => {\r\n        const editor = getState().editor;\r\n        editor.struct(struct);\r\n    };\r\n}\r\nfunction parseStruct(struct, server, options) {\r\n    if (typeof struct === 'string') {\r\n        options = options || {};\r\n        const { rescale, fragment, ...formatterOptions } = options;\r\n        const format = identifyStructFormat(struct);\r\n        if (format === SupportedFormat.cdx) {\r\n            struct = `base64::${struct.replace(/\\s/g, '')}`;\r\n        }\r\n        const factory = new FormatterFactory(server);\r\n        const service = factory.create(format, formatterOptions);\r\n        return service.getStructureFromStringAsync(struct);\r\n    }\r\n    else {\r\n        return Promise.resolve(struct);\r\n    }\r\n}\r\nexport function load(struct, options) {\r\n    return async (dispatch, getState) => {\r\n        const state = getState();\r\n        const editor = state.editor;\r\n        const server = state.server;\r\n        const errorHandler = editor.errorHandler;\r\n        options = options || {};\r\n        options = {\r\n            ...options,\r\n            'dearomatize-on-load': editor.options()['dearomatize-on-load'],\r\n            ignoreChiralFlag: editor.options().ignoreChiralFlag\r\n        };\r\n        dispatch(setAnalyzingFile(true));\r\n        try {\r\n            const parsedStruct = await parseStruct(struct, server, options);\r\n            const { fragment } = options;\r\n            const hasUnsupportedGroups = parsedStruct.sgroups.some((sGroup) => !supportedSGroupTypes[sGroup.type]);\r\n            if (hasUnsupportedGroups) {\r\n                await editor.event.confirm.dispatch();\r\n                parsedStruct.sgroups = parsedStruct.sgroups.filter((_key, sGroup) => supportedSGroupTypes[sGroup.type]);\r\n            }\r\n            parsedStruct.rescale(); // TODO: move out parsing?\r\n            if (editor.struct().atoms.size) {\r\n                // NB: reset id\r\n                const oldStruct = editor.struct().clone();\r\n                parsedStruct.sgroups.forEach((sg, sgId) => {\r\n                    const offset = SGroup.getOffset(oldStruct.sgroups.get(sgId));\r\n                    const atomSet = new Pile(sg.atoms);\r\n                    const crossBonds = SGroup.getCrossBonds(parsedStruct, atomSet);\r\n                    SGroup.bracketPos(sg, parsedStruct, crossBonds);\r\n                    if (offset)\r\n                        sg.updateOffset(offset);\r\n                });\r\n            }\r\n            parsedStruct.findConnectedComponents();\r\n            parsedStruct.setImplicitHydrogen();\r\n            const stereAtomsMap = getStereoAtomsMap(parsedStruct, Array.from(parsedStruct.bonds.values()));\r\n            parsedStruct.atoms.forEach((atom, id) => {\r\n                if (parsedStruct?.atomGetNeighbors(id)?.length === 0) {\r\n                    atom.stereoLabel = null;\r\n                    atom.stereoParity = 0;\r\n                }\r\n                else {\r\n                    const stereoProp = stereAtomsMap.get(id);\r\n                    if (stereoProp) {\r\n                        atom.stereoLabel = stereoProp.stereoLabel;\r\n                        atom.stereoParity = stereoProp.stereoParity;\r\n                    }\r\n                }\r\n            });\r\n            parsedStruct.markFragments();\r\n            if (fragment) {\r\n                if (parsedStruct.isBlank()) {\r\n                    const savedSelectedTool = SettingsManager.selectionTool;\r\n                    dispatch({\r\n                        type: 'ACTION',\r\n                        action: savedSelectedTool || tools['select-rectangle'].action\r\n                    });\r\n                }\r\n                else {\r\n                    dispatch(onAction({ tool: 'paste', opts: parsedStruct }));\r\n                }\r\n            }\r\n            else {\r\n                editor.struct(parsedStruct);\r\n            }\r\n            dispatch(setAnalyzingFile(false));\r\n            dispatch({ type: 'MODAL_CLOSE' });\r\n        }\r\n        catch (err) {\r\n            dispatch(setAnalyzingFile(false));\r\n            err && errorHandler(err.message);\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=shared.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/dist/index.d.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/ui/state/constants.js","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/ui/state/request/index.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/ui/action/tools.js","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/ui/utils/settingsManager.ts"],"map":"{\"version\":3,\"file\":\"shared.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/script/ui/state/shared.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/node_modules/.cache/rollup-plugin-typescript2/placeholder/script/ui/state/shared.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Struct } from 'ketcher-core';\r\nexport declare function onAction(action: any): any;\r\nexport declare function loadStruct(struct: any): (_dispatch: any, getState: any) => void;\r\nexport declare function load(struct: Struct, options?: any): (dispatch: any, getState: any) => Promise<void>;\r\n"}}
