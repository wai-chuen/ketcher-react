{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Pile, SgContexts, checkOverlapping, fromSeveralSgroupAddition, fromSgroupAction, fromSgroupDeletion, FunctionalGroup, SGroup } from 'ketcher-core';\r\nimport LassoHelper from './helper/lasso';\r\nimport { isEqual } from 'lodash/fp';\r\nimport { selMerge } from './select';\r\nconst searchMaps = [\r\n    'atoms',\r\n    'bonds',\r\n    'sgroups',\r\n    'functionalGroups',\r\n    'sgroupData'\r\n];\r\nclass SGroupTool {\r\n    editor;\r\n    lassoHelper;\r\n    isNotActiveTool;\r\n    constructor(editor) {\r\n        this.editor = editor;\r\n        this.lassoHelper = new LassoHelper(1, editor, null);\r\n        this.checkSelection();\r\n    }\r\n    checkSelection() {\r\n        const selection = this.editor.selection() || {};\r\n        if (selection.atoms && selection.bonds) {\r\n            const selectedAtoms = this.editor.selection()?.atoms;\r\n            const struct = this.editor.render.ctab;\r\n            const molecule = struct.molecule;\r\n            const sgroups = molecule.sgroups;\r\n            const newSelected = {\r\n                atoms: [],\r\n                bonds: []\r\n            };\r\n            let actualSgroupId;\r\n            let atomsResult = [];\r\n            let extraAtoms;\r\n            const functionalGroups = molecule.functionalGroups;\r\n            const result = [];\r\n            const id = sgroups.find((_, sgroup) => isEqual(sgroup.atoms, selectedAtoms));\r\n            if (selectedAtoms && functionalGroups.size) {\r\n                for (const atom of selectedAtoms) {\r\n                    const atomId = FunctionalGroup.atomsInFunctionalGroup(functionalGroups, atom);\r\n                    if (atomId == null) {\r\n                        extraAtoms = true;\r\n                    }\r\n                    const atomFromStruct = atomId !== null && struct.atoms.get(atomId)?.a;\r\n                    if (atomFromStruct) {\r\n                        for (const sgId of atomFromStruct.sgs.values()) {\r\n                            actualSgroupId = sgId;\r\n                        }\r\n                    }\r\n                    if (atomFromStruct &&\r\n                        FunctionalGroup.isAtomInContractedFunctionalGroup(atomFromStruct, sgroups, functionalGroups, false)) {\r\n                        const sgroupAtoms = actualSgroupId !== undefined &&\r\n                            SGroup.getAtoms(molecule, sgroups.get(actualSgroupId));\r\n                        const sgroupBonds = actualSgroupId !== undefined &&\r\n                            SGroup.getBonds(molecule, sgroups.get(actualSgroupId));\r\n                        atom === sgroupAtoms[0] &&\r\n                            newSelected.atoms.push(...sgroupAtoms) &&\r\n                            newSelected.bonds.push(...sgroupBonds);\r\n                    }\r\n                    if (atomFromStruct) {\r\n                        atomsResult.push(atomId);\r\n                    }\r\n                }\r\n            }\r\n            if (extraAtoms) {\r\n                atomsResult = [];\r\n            }\r\n            if (atomsResult && atomsResult.length > 0) {\r\n                for (const id of atomsResult) {\r\n                    const fgId = FunctionalGroup.findFunctionalGroupByAtom(functionalGroups, id);\r\n                    if (fgId !== null && !result.includes(fgId)) {\r\n                        result.push(fgId);\r\n                    }\r\n                }\r\n            }\r\n            if (result.length) {\r\n                this.editor.selection(null);\r\n                this.editor.event.removeFG.dispatch({ fgIds: result });\r\n                return;\r\n            }\r\n            SGroupTool.sgroupDialog(this.editor, id ?? null);\r\n            this.isNotActiveTool = true;\r\n        }\r\n    }\r\n    mousedown(event) {\r\n        const ci = this.editor.findItem(event, searchMaps);\r\n        const struct = this.editor.render.ctab;\r\n        const sgroups = struct.sgroups;\r\n        const molecule = struct.molecule;\r\n        const functionalGroups = molecule.functionalGroups;\r\n        const atomResult = [];\r\n        const bondResult = [];\r\n        const result = [];\r\n        if (ci && functionalGroups.size && ci.map === 'atoms') {\r\n            const atomId = FunctionalGroup.atomsInFunctionalGroup(functionalGroups, ci.id);\r\n            const atomFromStruct = atomId !== null && struct.atoms.get(atomId)?.a;\r\n            if (atomFromStruct &&\r\n                !FunctionalGroup.isAtomInContractedFunctionalGroup(atomFromStruct, sgroups, functionalGroups, true)) {\r\n                atomResult.push(atomId);\r\n            }\r\n        }\r\n        if (ci && functionalGroups.size && ci.map === 'bonds') {\r\n            const bondId = FunctionalGroup.bondsInFunctionalGroup(molecule, functionalGroups, ci.id);\r\n            const bondFromStruct = bondId !== null && struct.bonds.get(bondId)?.b;\r\n            if (bondFromStruct &&\r\n                !FunctionalGroup.isBondInContractedFunctionalGroup(bondFromStruct, sgroups, functionalGroups)) {\r\n                bondResult.push(bondId);\r\n            }\r\n        }\r\n        if (ci && functionalGroups.size && ci.map === 'functionalGroups') {\r\n            const sgroup = sgroups.get(ci.id);\r\n            if (FunctionalGroup.isFunctionalGroup(sgroup?.item)) {\r\n                this.editor.event.removeFG.dispatch({ fgIds: [ci.id] });\r\n                return;\r\n            }\r\n        }\r\n        if (atomResult.length > 0) {\r\n            for (const id of atomResult) {\r\n                const fgId = FunctionalGroup.findFunctionalGroupByAtom(functionalGroups, id);\r\n                if (fgId !== null && !result.includes(fgId)) {\r\n                    result.push(fgId);\r\n                }\r\n            }\r\n            this.editor.event.removeFG.dispatch({ fgIds: result });\r\n            return;\r\n        }\r\n        else if (bondResult.length > 0) {\r\n            for (const id of bondResult) {\r\n                const fgId = FunctionalGroup.findFunctionalGroupByBond(molecule, functionalGroups, id);\r\n                if (fgId !== null && !result.includes(fgId)) {\r\n                    result.push(fgId);\r\n                }\r\n            }\r\n            this.editor.event.removeFG.dispatch({ fgIds: result });\r\n            return;\r\n        }\r\n        if (!ci) {\r\n            //  ci.type == 'Canvas'\r\n            this.lassoHelper.begin(event);\r\n        }\r\n    }\r\n    mousemove(event) {\r\n        if (this.lassoHelper.running(event)) {\r\n            this.editor.selection(this.lassoHelper.addPoint(event));\r\n        }\r\n        else {\r\n            this.editor.hover(this.editor.findItem(event, searchMaps), null, event);\r\n        }\r\n    }\r\n    mouseleave(event) {\r\n        if (this.lassoHelper.running(event)) {\r\n            this.lassoHelper.end(event);\r\n        }\r\n    }\r\n    mouseup(event) {\r\n        const struct = this.editor.render.ctab;\r\n        const sgroups = struct.sgroups;\r\n        const molecule = struct.molecule;\r\n        const functionalGroups = molecule.functionalGroups;\r\n        const ci = this.editor.findItem(event, searchMaps);\r\n        const selected = this.editor.selection();\r\n        const newSelected = { atoms: [], bonds: [] };\r\n        let actualSgroupId;\r\n        let atomsResult = [];\r\n        let extraAtoms;\r\n        let bondsResult = [];\r\n        let extraBonds;\r\n        const result = [];\r\n        if (ci &&\r\n            ci.map === 'functionalGroups' &&\r\n            functionalGroups.size &&\r\n            FunctionalGroup.isContractedFunctionalGroup(ci.id, functionalGroups))\r\n            return;\r\n        if (selected && functionalGroups.size && selected.atoms) {\r\n            for (const atom of selected.atoms) {\r\n                const atomId = FunctionalGroup.atomsInFunctionalGroup(functionalGroups, atom);\r\n                if (atomId == null) {\r\n                    extraAtoms = true;\r\n                }\r\n                const atomFromStruct = atomId !== null && struct.atoms.get(atomId)?.a;\r\n                if (atomFromStruct) {\r\n                    for (const sgId of atomFromStruct.sgs.values()) {\r\n                        actualSgroupId = sgId;\r\n                    }\r\n                }\r\n                if (atomFromStruct &&\r\n                    FunctionalGroup.isAtomInContractedFunctionalGroup(atomFromStruct, sgroups, functionalGroups, true)) {\r\n                    const sgroupAtoms = actualSgroupId !== undefined &&\r\n                        SGroup.getAtoms(molecule, struct.sgroups.get(actualSgroupId)?.item);\r\n                    const sgroupBonds = actualSgroupId !== undefined &&\r\n                        SGroup.getBonds(molecule, struct.sgroups.get(actualSgroupId)?.item);\r\n                    atom === sgroupAtoms[0] &&\r\n                        newSelected.atoms.push(...sgroupAtoms) &&\r\n                        newSelected.bonds.push(...sgroupBonds);\r\n                }\r\n                if (atomFromStruct) {\r\n                    atomsResult.push(atomId);\r\n                }\r\n            }\r\n        }\r\n        if (selected && functionalGroups.size && selected.bonds) {\r\n            for (const bond of selected.bonds) {\r\n                const bondId = FunctionalGroup.bondsInFunctionalGroup(molecule, functionalGroups, bond);\r\n                if (bondId === null) {\r\n                    extraBonds = true;\r\n                }\r\n                const bondFromStruct = bondId !== null && struct.bonds.get(bondId)?.b;\r\n                if (bondFromStruct) {\r\n                    bondsResult.push(bondId);\r\n                }\r\n            }\r\n        }\r\n        if (atomsResult.length) {\r\n            atomsResult.forEach((id) => {\r\n                const fgId = FunctionalGroup.findFunctionalGroupByAtom(functionalGroups, id);\r\n                const sgroupAtoms = SGroup.getAtoms(molecule, struct.sgroups.get(fgId)?.item);\r\n                newSelected.atoms.push(...sgroupAtoms);\r\n            });\r\n        }\r\n        if (bondsResult.length) {\r\n            bondsResult.forEach((id) => {\r\n                const fgId = FunctionalGroup.findFunctionalGroupByBond(molecule, functionalGroups, id);\r\n                const sgroupBonds = SGroup.getBonds(molecule, struct.sgroups.get(fgId)?.item);\r\n                newSelected.bonds.push(...sgroupBonds);\r\n            });\r\n        }\r\n        if (extraAtoms || extraBonds) {\r\n            atomsResult = null;\r\n            bondsResult = null;\r\n        }\r\n        if (atomsResult && atomsResult.length > 0) {\r\n            for (const id of atomsResult) {\r\n                const fgId = FunctionalGroup.findFunctionalGroupByAtom(functionalGroups, id);\r\n                if (fgId !== null && !result.includes(fgId)) {\r\n                    result.push(fgId);\r\n                }\r\n            }\r\n        }\r\n        if (bondsResult && bondsResult.length > 0) {\r\n            for (const id of bondsResult) {\r\n                const fgId = FunctionalGroup.findFunctionalGroupByBond(molecule, functionalGroups, id);\r\n                if (fgId !== null && !result.includes(fgId)) {\r\n                    result.push(fgId);\r\n                }\r\n            }\r\n        }\r\n        if (result.length === 1) {\r\n            this.editor.selection(null);\r\n            this.lassoHelper.cancel();\r\n            this.editor.event.removeFG.dispatch({ fgIds: result });\r\n            return;\r\n        }\r\n        let id = null; // id of an existing group, if we're editing one\r\n        let selection = null; // atoms to include in a newly created group\r\n        if (this.lassoHelper.running(event)) {\r\n            // TODO it catches more events than needed, to be re-factored\r\n            selection =\r\n                newSelected.atoms.length > 0\r\n                    ? selMerge(this.lassoHelper.end(event), newSelected, false)\r\n                    : this.lassoHelper.end(event);\r\n            this.editor.selection(selection);\r\n        }\r\n        else {\r\n            if (!ci) {\r\n                // ci.type == 'Canvas'\r\n                return;\r\n            }\r\n            this.editor.hover(this.editor.findItem(event, searchMaps), null, event);\r\n            if (ci.map === 'atoms') {\r\n                // if we click the SGroup tool on a single atom or bond, make a group out of those\r\n                selection = { atoms: [ci.id] };\r\n            }\r\n            else if (ci.map === 'bonds') {\r\n                const bond = this.editor.render.ctab.bonds.get(ci.id);\r\n                selection = {\r\n                    atoms: [bond?.b.begin, bond?.b.end],\r\n                    bonds: [ci.id]\r\n                };\r\n            }\r\n            else if (ci.map === 'sgroups' || ci.map === 'sgroupData') {\r\n                id = ci.id;\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n        }\r\n        const isAtomsOrBondsSelected = selection?.atoms?.length || selection?.bonds?.length;\r\n        // TODO: handle click on an existing group?\r\n        if (id !== null || isAtomsOrBondsSelected) {\r\n            this.editor.selection(selection);\r\n            SGroupTool.sgroupDialog(this.editor, id);\r\n        }\r\n    }\r\n    cancel() {\r\n        if (this.lassoHelper.running()) {\r\n            this.lassoHelper.end();\r\n        }\r\n        this.editor.selection(null);\r\n    }\r\n    static sgroupDialog(editor, id) {\r\n        const restruct = editor.render.ctab;\r\n        const struct = restruct.molecule;\r\n        const selection = editor.selection() || {};\r\n        const sg = id !== null ? struct.sgroups.get(id) : null;\r\n        let attrs;\r\n        if (sg) {\r\n            attrs = sg.getAttrs();\r\n            if (!attrs.context)\r\n                attrs.context = getContextBySgroup(restruct, sg.atoms);\r\n        }\r\n        else {\r\n            attrs = {\r\n                context: getContextBySelection(restruct, selection)\r\n            };\r\n        }\r\n        const res = editor.event.sgroupEdit.dispatch({\r\n            type: sg?.type,\r\n            attrs\r\n        });\r\n        Promise.resolve(res)\r\n            .then((newSg) => {\r\n            // TODO: check before signal\r\n            if (newSg.type !== 'DAT' && // when data s-group separates\r\n                checkOverlapping(struct, selection.atoms || [])) {\r\n                editor.event.message.dispatch({\r\n                    error: 'Partial S-group overlapping is not allowed.'\r\n                });\r\n            }\r\n            else {\r\n                if (!sg &&\r\n                    newSg.type !== 'DAT' &&\r\n                    (!selection.atoms || selection.atoms.length === 0))\r\n                    return;\r\n                const isDataSg = sg && sg.getAttrs().context === newSg.attrs.context;\r\n                if (isDataSg) {\r\n                    const action = fromSeveralSgroupAddition(restruct, newSg.type, sg.atoms, newSg.attrs).mergeWith(fromSgroupDeletion(restruct, id));\r\n                    editor.update(action);\r\n                    editor.selection(selection);\r\n                    return;\r\n                }\r\n                const result = fromContextType(id, editor, newSg, selection);\r\n                editor.update(result.action);\r\n                editor.selection(null);\r\n            }\r\n        })\r\n            .catch(() => null);\r\n    }\r\n}\r\nfunction getContextBySgroup(restruct, sgAtoms) {\r\n    const struct = restruct.molecule;\r\n    if (sgAtoms.length === 1) {\r\n        return SgContexts.Atom;\r\n    }\r\n    if (manyComponentsSelected(restruct, sgAtoms)) {\r\n        return SgContexts.Multifragment;\r\n    }\r\n    if (singleComponentSelected(restruct, sgAtoms)) {\r\n        return SgContexts.Fragment;\r\n    }\r\n    const atomSet = new Pile(sgAtoms);\r\n    const sgBonds = Array.from(struct.bonds.values()).filter((bond) => atomSet.has(bond.begin) && atomSet.has(bond.end));\r\n    return anyChainedBonds(sgBonds) ? SgContexts.Group : SgContexts.Bond;\r\n}\r\nfunction getContextBySelection(restruct, selection) {\r\n    const struct = restruct.molecule;\r\n    if (selection.atoms && !selection.bonds) {\r\n        return SgContexts.Atom;\r\n    }\r\n    const bonds = selection.bonds.map((bondid) => struct.bonds.get(bondid));\r\n    if (!anyChainedBonds(bonds)) {\r\n        return SgContexts.Bond;\r\n    }\r\n    selection.atoms = selection.atoms || [];\r\n    const atomSet = new Pile(selection.atoms);\r\n    const allBondsSelected = bonds.every((bond) => atomSet.has(bond.begin) && atomSet.has(bond.end));\r\n    if (singleComponentSelected(restruct, selection.atoms) && allBondsSelected) {\r\n        return SgContexts.Fragment;\r\n    }\r\n    return manyComponentsSelected(restruct, selection.atoms)\r\n        ? SgContexts.Multifragment\r\n        : SgContexts.Group;\r\n}\r\nfunction fromContextType(id, editor, newSg, currSelection) {\r\n    const restruct = editor.render.ctab;\r\n    const sg = restruct.molecule.sgroups.get(id);\r\n    const sourceAtoms = (sg && sg.atoms) || currSelection.atoms || [];\r\n    const context = newSg.attrs.context;\r\n    const result = fromSgroupAction(context, restruct, newSg, sourceAtoms, currSelection);\r\n    result.selection = result.selection || currSelection;\r\n    if (id !== null && id !== undefined) {\r\n        result.action = result.action.mergeWith(fromSgroupDeletion(restruct, id));\r\n    }\r\n    editor.selection(result.selection);\r\n    return result;\r\n}\r\nfunction anyChainedBonds(bonds) {\r\n    if (bonds.length === 0) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < bonds.length; ++i) {\r\n        const fixedBond = bonds[i];\r\n        for (let j = 0; j < bonds.length; ++j) {\r\n            if (i === j)\r\n                continue;\r\n            const bond = bonds[j];\r\n            if (fixedBond.end === bond.begin || fixedBond.end === bond.end) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction singleComponentSelected(restruct, atoms) {\r\n    return countOfSelectedComponents(restruct, atoms) === 1;\r\n}\r\nfunction manyComponentsSelected(restruct, atoms) {\r\n    return countOfSelectedComponents(restruct, atoms) > 1;\r\n}\r\nfunction countOfSelectedComponents(restruct, atoms) {\r\n    const atomSet = new Pile(atoms);\r\n    return Array.from(restruct.connectedComponents.values()).reduce((acc, component) => acc + (atomSet.isSuperset(component) ? 1 : 0), 0);\r\n}\r\nexport default SGroupTool;\r\n//# sourceMappingURL=sgroup.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/dist/index.d.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/editor/tool/helper/lasso.ts","/usr/local/google/home/waich/workspace/ketcher/node_modules/@types/lodash/fp.d.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/editor/tool/select.ts","/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/src/script/editor/Editor.ts"],"map":"{\"version\":3,\"file\":\"sgroup.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/script/editor/tool/sgroup.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/node_modules/.cache/rollup-plugin-typescript2/placeholder/script/editor/tool/sgroup.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport Editor from '../Editor';\r\ndeclare class SGroupTool {\r\n    editor: Editor;\r\n    lassoHelper: any;\r\n    isNotActiveTool: boolean | undefined;\r\n    constructor(editor: any);\r\n    checkSelection(): void;\r\n    mousedown(event: any): void;\r\n    mousemove(event: any): void;\r\n    mouseleave(event: any): void;\r\n    mouseup(event: any): void;\r\n    cancel(): void;\r\n    static sgroupDialog(editor: any, id: any): void;\r\n}\r\nexport default SGroupTool;\r\n"}}
