{"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\r\n/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { useEffect, useCallback } from 'react';\r\nimport styled from '@emotion/styled';\r\nconst StyledInput = styled('input') `\n  border: 1px solid #cad3dd;\n  border-radius: 4px;\n  padding: 3px 8px;\n  color: #585858;\n  font-size: 14px;\n  line-height: 16px;\n  caret-color: #43b5c0;\n  margin-bottom: 8px;\n\n  &:hover {\n    border-color: #43b5c0;\n  }\n\n  &:active,\n  &:focus {\n    border-color: #167782;\n    outline: none;\n  }\n\n  &::after,\n  &::before {\n    display: none;\n  }\n`;\r\nconst onFocusHandler = (event) => {\r\n    const el = event.target;\r\n    el.select();\r\n};\r\nexport const updateInputString = (zoom, inputElement) => {\r\n    if (!inputElement)\r\n        return;\r\n    inputElement.value = `${zoom}%`;\r\n};\r\nexport const ZoomInput = ({ onZoomSubmit, currentZoom, inputRef, shortcuts }) => {\r\n    useEffect(() => {\r\n        const inputEl = inputRef.current;\r\n        updateInputString(currentZoom, inputEl);\r\n        if (document.activeElement === inputEl) {\r\n            inputEl?.select();\r\n        }\r\n    }, [currentZoom, inputRef]);\r\n    const onKeyDown = useCallback((event) => {\r\n        const inputEl = inputRef.current;\r\n        if (!inputEl) {\r\n            return;\r\n        }\r\n        // Prevent bubbling of keyDown events to capture input and Enter, allow bubbling of shortcuts\r\n        const zoomShortcuts = [shortcuts['zoom-out'], shortcuts['zoom-in']];\r\n        if (!zoomShortcuts.includes(event.key)) {\r\n            event.nativeEvent.stopImmediatePropagation();\r\n        }\r\n        if (event.key === 'Enter') {\r\n            onZoomSubmit();\r\n            inputEl.select();\r\n        }\r\n    }, [onZoomSubmit, inputRef, shortcuts]);\r\n    // Focus on input field upon mounting\r\n    useEffect(() => {\r\n        const inputEl = inputRef.current;\r\n        inputEl?.focus();\r\n        inputEl?.select();\r\n    }, [inputRef]);\r\n    return (_jsx(StyledInput, { ref: inputRef, onFocus: onFocusHandler, onKeyDown: onKeyDown }));\r\n};\r\n//# sourceMappingURL=ZoomInput.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/node_modules/@types/react/index.d.ts","/usr/local/google/home/waich/workspace/ketcher/node_modules/@emotion/styled/types/index.d.ts"],"map":"{\"version\":3,\"file\":\"ZoomInput.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../../src/script/ui/views/toolbars/TopToolbar/ZoomInput.tsx\"],\"names\":[],\"mappings\":\";AAAA;;;;;;;;;;;;;;6EAc6E;AAE7E,OAAO,EAGL,SAAS,EACT,WAAW,EAEZ,MAAM,OAAO,CAAA;AACd,OAAO,MAAM,MAAM,iBAAiB,CAAA;AAEpC,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,CAAA;;;;;;;;;;;;;;;;;;;;;;;;CAwBlC,CAAA;AAED,MAAM,cAAc,GAAG,CAAC,KAAmC,EAAE,EAAE;IAC7D,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAA;IACvB,EAAE,CAAC,MAAM,EAAE,CAAA;AACb,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,IAAY,EACZ,YAAqC,EACrC,EAAE;IACF,IAAI,CAAC,YAAY;QAAE,OAAM;IACzB,YAAY,CAAC,KAAK,GAAG,GAAG,IAAI,GAAG,CAAA;AACjC,CAAC,CAAA;AASD,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,EACxB,YAAY,EACZ,WAAW,EACX,QAAQ,EACR,SAAS,EACM,EAAE,EAAE;IACnB,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAA;QAChC,iBAAiB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAA;QACvC,IAAI,QAAQ,CAAC,aAAa,KAAK,OAAO,EAAE;YACtC,OAAO,EAAE,MAAM,EAAE,CAAA;SAClB;IACH,CAAC,EAAE,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAA;IAE3B,MAAM,SAAS,GAAG,WAAW,CAC3B,CAAC,KAAsC,EAAE,EAAE;QACzC,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAA;QAChC,IAAI,CAAC,OAAO,EAAE;YACZ,OAAM;SACP;QAED,6FAA6F;QAC7F,MAAM,aAAa,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,CAAA;QACnE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;YACtC,KAAK,CAAC,WAAW,CAAC,wBAAwB,EAAE,CAAA;SAC7C;QAED,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,EAAE;YACzB,YAAY,EAAE,CAAA;YACd,OAAO,CAAC,MAAM,EAAE,CAAA;SACjB;IACH,CAAC,EACD,CAAC,YAAY,EAAE,QAAQ,EAAE,SAAS,CAAC,CACpC,CAAA;IAED,qCAAqC;IACrC,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAA;QAChC,OAAO,EAAE,KAAK,EAAE,CAAA;QAChB,OAAO,EAAE,MAAM,EAAE,CAAA;IACnB,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAA;IAEd,OAAO,CACL,KAAC,WAAW,IACV,GAAG,EAAE,QAAQ,EACb,OAAO,EAAE,cAAc,EACvB,SAAS,EAAE,SAAS,GACpB,CACH,CAAA;AACH,CAAC,CAAA\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/node_modules/.cache/rollup-plugin-typescript2/placeholder/script/ui/views/toolbars/TopToolbar/ZoomInput.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { RefObject } from 'react';\r\nexport declare const updateInputString: (zoom: number, inputElement: HTMLInputElement | null) => void;\r\nexport interface ZoomInputProps {\r\n    onZoomSubmit: () => void;\r\n    currentZoom: number;\r\n    inputRef: RefObject<HTMLInputElement>;\r\n    shortcuts: {\r\n        [key in string]: string;\r\n    };\r\n}\r\nexport declare const ZoomInput: ({ onZoomSubmit, currentZoom, inputRef, shortcuts }: ZoomInputProps) => JSX.Element;\r\n"}}
