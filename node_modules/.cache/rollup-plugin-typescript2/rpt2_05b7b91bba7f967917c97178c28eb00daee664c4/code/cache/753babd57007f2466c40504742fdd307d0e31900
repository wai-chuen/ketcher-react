{"code":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { RxnArrowMode, StereoFlag, getPropertiesByFormat } from 'ketcher-core';\r\nexport function couldBeSaved(struct, format) {\r\n    const warnings = [];\r\n    const formatName = getPropertiesByFormat(format).name;\r\n    const rxnArrowsSize = struct.rxnArrows.size;\r\n    const hasRxnArrow = struct.hasRxnArrow();\r\n    if (format === 'smiles' || format === 'smarts') {\r\n        warnings.push(`Structure contains query properties of atoms and bonds that are not supported in the ${format?.toUpperCase()}. Query properties will not be reflected in the file saved.`);\r\n    }\r\n    if (format === 'smiles') {\r\n        const arrayOfAtoms = Array.from(struct.atoms.values());\r\n        const hasGenerics = arrayOfAtoms.some((atom) => atom.pseudo);\r\n        if (hasGenerics) {\r\n            warnings.push(`Structure contains generic atoms. They will be saved as any atom (*).`);\r\n        }\r\n    }\r\n    if (format !== 'ket') {\r\n        if (hasRxnArrow) {\r\n            const arrayOfArrows = Array.from(struct.rxnArrows.values());\r\n            const rxnArrowMode = arrayOfArrows[0].mode;\r\n            if (rxnArrowMode !== RxnArrowMode.OpenAngle) {\r\n                warnings.push(`The ${formatName} format does not support drawn elements: the reaction ${rxnArrowMode} arrow will be replaced with the reaction arrow`);\r\n            }\r\n        }\r\n        // TODO: find better solution for case when Arrows > 1\r\n        if (rxnArrowsSize > 1) {\r\n            warnings.push(`The ${formatName} format does not support drawn elements: reaction arrows will be lost.`);\r\n        }\r\n    }\r\n    if (['inChI', 'inChIAuxInfo', 'smiles', 'smilesExt'].includes(format)) {\r\n        if (struct.rgroups.size !== 0)\r\n            warnings.push(`In ${formatName} the structure will be saved without R-group fragments`);\r\n        struct = struct.clone(); // need this: .getScaffold()\r\n        const isRg = struct.atoms.find((_ind, atom) => atom.label === 'R#');\r\n        if (isRg !== null)\r\n            warnings.push(`In ${formatName} the structure will be saved without R-group members`);\r\n        const isSg = struct.sgroups.find((_ind, sg) => sg.type !== 'MUL' && !/^INDIGO_.+_DESC$/i.test(sg.data.fieldName));\r\n        if (isSg !== null)\r\n            warnings.push(`In ${formatName} the structure will be saved without S-groups`);\r\n    }\r\n    if ([\r\n        'smiles',\r\n        'smilesExt',\r\n        'smarts',\r\n        'inChI',\r\n        'inChIAuxInfo',\r\n        'cml'\r\n    ].includes(format)) {\r\n        const isVal = struct.atoms.find((_ind, atom) => atom.explicitValence >= 0);\r\n        if (isVal !== null)\r\n            warnings.push(`In ${formatName} valence is not supported`);\r\n    }\r\n    if (['mol', 'rxn'].includes(format) &&\r\n        Array.from(struct.frags.values()).some((fr) => {\r\n            if (fr?.enhancedStereoFlag) {\r\n                return fr.enhancedStereoFlag !== StereoFlag.Abs;\r\n            }\r\n            return false;\r\n        })) {\r\n        warnings.push(`Structure contains enhanced stereochemistry features. Information will be partly lost.`);\r\n    }\r\n    if (['inChI', 'inChIAuxInfo', 'smiles', 'smilesExt'].includes(format)) {\r\n        if (struct.functionalGroups.size !== 0)\r\n            warnings.push(`In ${formatName} the structure will be saved without functional groups.`);\r\n    }\r\n    if (['cml'].includes(format)) {\r\n        if (struct.functionalGroups.size !== 0)\r\n            warnings.push(`Structure contains functional groups. In ${formatName} information will be partly lost.`);\r\n    }\r\n    if (warnings.length !== 0)\r\n        return warnings.join('\\n');\r\n    return null;\r\n}\r\n//# sourceMappingURL=structConverter.js.map","references":["/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-core/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"structConverter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/script/ui/data/convert/structConverter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/waich/workspace/ketcher/packages/ketcher-react/node_modules/.cache/rollup-plugin-typescript2/placeholder/script/ui/data/convert/structConverter.d.ts","writeByteOrderMark":false,"text":"/****************************************************************************\r\n * Copyright 2021 EPAM Systems\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n ***************************************************************************/\r\nimport { Struct, SupportedFormat } from 'ketcher-core';\r\nexport declare function couldBeSaved(struct: Struct, format: SupportedFormat): string | null;\r\n"}}
